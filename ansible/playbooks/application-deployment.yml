- name: Deploy Social Media Platform Application
  hosts: localhost
  gather_facts: false
  vars:
    environment: "{{ env | default('development') }}"
    image_tag: "{{ tag | default('latest') }}"
    namespace: "social-platform-{{ environment }}"
    
  tasks:
    - name: Create application namespace
      kubernetes.core.k8s:
        name: "{{ namespace }}"
        api_version: v1
        kind: Namespace
        state: present

    - name: Deploy database secrets
      kubernetes.core.k8s:
        definition:
          apiVersion: v1
          kind: Secret
          metadata:
            name: database-credentials
            namespace: "{{ namespace }}"
          type: Opaque
          data:
            username: "{{ database_username | b64encode }}"
            password: "{{ database_password | b64encode }}"
            host: "{{ database_host | b64encode }}"
            port: "{{ database_port | default('5432') | b64encode }}"

    - name: Deploy Redis configuration
      kubernetes.core.k8s:
        definition:
          apiVersion: v1
          kind: ConfigMap
          metadata:
            name: redis-config
            namespace: "{{ namespace }}"
          data:
            redis-host: "{{ redis_host }}"
            redis-port: "6379"

    - name: Deploy application secrets
      kubernetes.core.k8s:
        definition:
          apiVersion: v1
          kind: Secret
          metadata:
            name: app-secrets
            namespace: "{{ namespace }}"
          type: Opaque
          data:
            secret-key: "{{ app_secret_key | default('change-me-in-production') | b64encode }}"
            livekit-api-key: "{{ livekit_api_key | default('') | b64encode }}"
            livekit-api-secret: "{{ livekit_api_secret | default('') | b64encode }}"

    - name: Deploy API application
      kubernetes.core.k8s:
        definition:
          apiVersion: apps/v1
          kind: Deployment
          metadata:
            name: social-platform-api
            namespace: "{{ namespace }}"
            labels:
              app: social-platform-api
              environment: "{{ environment }}"
              version: "{{ image_tag }}"
          spec:
            replicas: "{{ api_replicas | default(3) }}"
            strategy:
              type: RollingUpdate
              rollingUpdate:
                maxSurge: 1
                maxUnavailable: 0
            selector:
              matchLabels:
                app: social-platform-api
            template:
              metadata:
                labels:
                  app: social-platform-api
                  environment: "{{ environment }}"
              spec:
                containers:
                - name: api
                  image: "{{ ecr_repository }}/api:{{ image_tag }}"
                  imagePullPolicy: Always
                  ports:
                  - containerPort: 8000
                    name: http
                  env:
                  - name: ENVIRONMENT
                    value: "{{ environment }}"
                  - name: DEBUG
                    value: "{{ 'True' if environment == 'development' else 'False' }}"
                  - name: DATABASE_HOST
                    valueFrom:
                      secretKeyRef:
                        name: database-credentials
                        key: host
                  - name: DATABASE_USERNAME
                    valueFrom:
                      secretKeyRef:
                        name: database-credentials
                        key: username
                  - name: DATABASE_PASSWORD
                    valueFrom:
                      secretKeyRef:
                        name: database-credentials
                        key: password
                  - name: DATABASE_PORT
                    valueFrom:
                      secretKeyRef:
                        name: database-credentials
                        key: port
                  - name: REDIS_HOST
                    valueFrom:
                      configMapKeyRef:
                        name: redis-config
                        key: redis-host
                  - name: SECRET_KEY
                    valueFrom:
                      secretKeyRef:
                        name: app-secrets
                        key: secret-key
                  - name: ALLOWED_HOSTS
                    value: "{{ domain_name }},api.{{ domain_name }}"
                  resources:
                    requests:
                      memory: "512Mi"
                      cpu: "250m"
                    limits:
                      memory: "2Gi"
                      cpu: "1000m"
                  livenessProbe:
                    httpGet:
                      path: /health/
                      port: 8000
                    initialDelaySeconds: 60
                    periodSeconds: 30
                    timeoutSeconds: 10
                    failureThreshold: 3
                  readinessProbe:
                    httpGet:
                      path: /health/
                      port: 8000
                    initialDelaySeconds: 10
                    periodSeconds: 10
                    timeoutSeconds: 5
                    failureThreshold: 3

    - name: Deploy API service
      kubernetes.core.k8s:
        definition:
          apiVersion: v1
          kind: Service
          metadata:
            name: social-platform-api
            namespace: "{{ namespace }}"
            labels:
              app: social-platform-api
          spec:
            selector:
              app: social-platform-api
            ports:
            - name: http
              port: 80
              targetPort: 8000
              protocol: TCP
            type: ClusterIP

    - name: Deploy WebSocket application
      kubernetes.core.k8s:
        definition:
          apiVersion: apps/v1
          kind: Deployment
          metadata:
            name: social-platform-websocket
            namespace: "{{ namespace }}"
            labels:
              app: social-platform-websocket
              environment: "{{ environment }}"
              version: "{{ image_tag }}"
          spec:
            replicas: "{{ websocket_replicas | default(2) }}"
            strategy:
              type: RollingUpdate
              rollingUpdate:
                maxSurge: 1
                maxUnavailable: 0
            selector:
              matchLabels:
                app: social-platform-websocket
            template:
              metadata:
                labels:
                  app: social-platform-websocket
                  environment: "{{ environment }}"
              spec:
                containers:
                - name: websocket
                  image: "{{ ecr_repository }}/websocket:{{ image_tag }}"
                  imagePullPolicy: Always
                  ports:
                  - containerPort: 8001
                    name: websocket
                  env:
                  - name: ENVIRONMENT
                    value: "{{ environment }}"
                  - name: REDIS_HOST
                    valueFrom:
                      configMapKeyRef:
                        name: redis-config
                        key: redis-host
                  resources:
                    requests:
                      memory: "256Mi"
                      cpu: "125m"
                    limits:
                      memory: "1Gi"
                      cpu: "500m"
                  livenessProbe:
                    httpGet:
                      path: /ws/health/
                      port: 8001
                    initialDelaySeconds: 30
                    periodSeconds: 30
                  readinessProbe:
                    httpGet:
                      path: /ws/health/
                      port: 8001
                    initialDelaySeconds: 5
                    periodSeconds: 10

    - name: Deploy WebSocket service
      kubernetes.core.k8s:
        definition:
          apiVersion: v1
          kind: Service
          metadata:
            name: social-platform-websocket
            namespace: "{{ namespace }}"
            labels:
              app: social-platform-websocket
          spec:
            selector:
              app: social-platform-websocket
            ports:
            - name: websocket
              port: 80
              targetPort: 8001
              protocol: TCP
            type: ClusterIP

    - name: Deploy Ingress for applications
      kubernetes.core.k8s:
        definition:
          apiVersion: networking.k8s.io/v1
          kind: Ingress
          metadata:
            name: social-platform-ingress
            namespace: "{{ namespace }}"
            annotations:
              kubernetes.io/ingress.class: alb
              alb.ingress.kubernetes.io/scheme: internet-facing
              alb.ingress.kubernetes.io/target-type: ip
              alb.ingress.kubernetes.io/ssl-redirect: '443'
              alb.ingress.kubernetes.io/certificate-arn: "{{ ssl_certificate_arn | default('') }}"
          spec:
            rules:
            - host: "api.{{ domain_name }}"
              http:
                paths:
                - path: /
                  pathType: Prefix
                  backend:
                    service:
                      name: social-platform-api
                      port:
                        number: 80
            - host: "ws.{{ domain_name }}"
              http:
                paths:
                - path: /
                  pathType: Prefix
                  backend:
                    service:
                      name: social-platform-websocket
                      port:
                        number: 80
